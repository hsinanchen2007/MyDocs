template <typename T> std::unordered_map<T, int> count_parents(std::unordered_map<T, std::vector<T>> graph) {
    std::unordered_map<T, int> counts;
    for (auto entry : graph) {
        counts[entry.first] = 0;
    }
    for (auto entry : graph) {
        for (auto node : entry.second) {
            counts[node] += 1;
        }
    }
    return counts;
}

template <typename T> std::vector<T> topo_sort(std::unordered_map<T, std::vector<T>> graph) {
    std::vector<T> res;
    std::queue<T> q;
    std::unordered_map<T, int> counts = count_parents(graph);
    for (auto entry : counts) {
        if (entry.second == 0) q.push(entry.first);
    }
    while (q.size() > 0) {
        T node = q.front();
        res.emplace_back(node);
        for (T child : graph[node]) {
            counts[child] -= 1;
            if (counts[child] == 0) q.push(child);
        }
        q.pop();
    }
    if (graph.size() == res.size()) return res;
    else {
        std::cout << "Invalid topo sort: graph contains cycle" <<'\n';
        return std::vector<T>();
    }
}
