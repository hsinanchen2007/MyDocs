/*
** 一個使用動態分配的鏈式結構實作的二元搜尋樹。 
*/
#include "tree.h"
#include <assert.h>
#include <stdio.h>
#include <malloc.h>

/*
** TreeNode結構包含了值和兩個指向某個樹節點的指標。 
*/
typedef struct TREE_NODE {
        TREE_TYPE    value;
        struct TREE_NODE *left;
        struct TREE_NODE *right;
} TreeNode;

/*
** 指向樹根節點的指標。
*/
static  TreeNode    *tree;

/*
** insert
*/
void
insert( TREE_TYPE value )
{
        TreeNode *current;
        TreeNode **link;

        /*
        ** 從根節點開始。
        */
        link = &tree;

        /*
        ** 持續尋找值，進入合適的子樹。
        */
        while( (current = *link) != NULL ){
        /*
        ** 根據情況，進入左子樹或右子樹
        ** (確認沒有出現重複的值)。
        */
                if( value < current->value )
                        link = &current->left;
                else {
                        assert( value != current->value );
                        link = &current->right;
                }
}

/*
** 分配一個新節點，使適當節點的link欄位指向它。
*/
current = malloc( sizeof( TreeNode ) );
assert( current != NULL );
current->value = value;
current->left = NULL;
current->right = NULL;
*link = current;
}

/*
** find  
*/
TREE_TYPE *
find( TREE_TYPE value )
{
    TreeNode    *current;

    /*
    ** 從根節點開始，直到找到這個值，進入合適的子樹。
    */
    current = tree;

    while( current != NULL && current->value != value ){
    /*
    ** 根據情況，進入左子樹或右子樹。
    */
        if( value < current->value )
                        current = current->left;
        else
                        current = current->right;
      }

        if( current != NULL )
                        return &current->value;
        else
                        return NULL;
    }

/*
** do_pre_order_traverse
** 執行一層前序巡訪。
** 這個幫助函數用於保存當前正在處理的節點的資訊。
** 這個函數並不是使用者介面的一部分。
*/
static void
do_pre_order_traverse( TreeNode *current,
    void (*callback)( TREE_TYPE value ) )
{
    if( current != NULL ){
        callback( current->value );
        do_pre_order_traverse( current->left, callback );
        do_pre_order_traverse( current->right, callback );
    }
}

/*
** pre_order_traverse  
*/
void
pre_order_traverse( void (*callback)( TREE_TYPE value ) )
{
    do_pre_order_traverse( tree, callback );
}
